import{b as i,N as o}from"../../../index-5a2ad800.js";async function f(){try{const r=(await i.identity.launchWebAuthFlow({url:"https://anilist.co/api/v2/oauth/authorize?client_id=27507&response_type=token",interactive:!0})).split("#")[1].split("&")[0].split("=")[1];return await i.storage.local.set({token:r,lastPage:"/medialist"}),r}catch(e){console.log(e)}}i.runtime.onInstalled.addListener(u);i.runtime.onStartup.addListener(u);i.permissions.onAdded.addListener(e=>{e.permissions?.includes("notifications")&&!i.notifications?.onClicked.hasListener(d)&&i.notifications.onClicked.addListener(d)});function d(e){console.log(e),e.startsWith("https://anilist.co/")&&window.open(e),e==="unknown"&&window.open("https://github.com/TehNut/AniMouto")}async function u(){const{token:e,config:a}=await i.storage.local.get(["token","config"]);await i.alarms.clearAll(),e&&a.notifications.enablePolling&&i.alarms.create("notifications",{delayInMinutes:a.notifications.pollingInterval,periodInMinutes:a.notifications.pollingInterval}),y(),i.notifications&&i.notifications.onClicked.addListener(d)}async function h(){const{unreadNotificationCount:e}=await i.storage.local.get();await i.action.setBadgeText({text:e?e.toString():""}),await i.action.setBadgeBackgroundColor({color:[61,180,242,Math.floor(255*.8)]})}i.alarms.onAlarm.addListener(e=>{e.name==="notifications"&&y()});async function y(){const{token:e,unreadNotificationCount:a,config:r}=await i.storage.local.get();if(!e)return;const n=await m({query:"{ Viewer { unreadNotificationCount } }",token:e}).then(s=>s.data);await i.action.setBadgeText({text:n.Viewer.unreadNotificationCount?n.Viewer.unreadNotificationCount.toString():""}),await i.action.setBadgeBackgroundColor({color:[61,180,242,Math.floor(255*.8)]}),r.notifications.desktopNotifications&&n.Viewer.unreadNotificationCount>0&&n.Viewer.unreadNotificationCount-a>0&&g(n.Viewer.unreadNotificationCount-a),await i.storage.local.set({unreadNotificationCount:0})}async function g(e){if(!await i.permissions.contains({permissions:["notifications"]}))return;const{token:a}=await i.storage.local.get("token"),r=Math.ceil(e/50);async function n(s,p){const{Page:{notifications:l}}=await m({token:a,query:I,variables:{amount:p||50,page:s}}).then(t=>t.data);l.forEach(t=>{switch(t.type){case o.ACTIVITY_LIKE:case o.ACTIVITY_MENTION:case o.ACTIVITY_REPLY:case o.ACTIVITY_REPLY_LIKE:case o.ACTIVITY_REPLY_SUBSCRIBED:{c(t.activity?t.activity.url:t.user.url,"Activity",t.type,{user:t.user.name});break}case o.ACTIVITY_MESSAGE:{c(`https://anilist.co/activity/${t.activityId}`,"Message",t.type,{user:t.user.name});break}case o.AIRING:{c(t.media.url,"Episode",t.type,{episode:t.episode,media:t.media?.title?.userPreferred});break}case o.RELATED_MEDIA_ADDITION:{c(t.media.url,"Related Media",t.type,{media:t.media?.title?.userPreferred});break}case o.FOLLOWING:{c(t.activity?t.activity.url:t.user.url,"Follower",t.type,{user:t.user.name});break}case o.THREAD_COMMENT_LIKE:case o.THREAD_COMMENT_MENTION:case o.THREAD_COMMENT_REPLY:case o.THREAD_LIKE:case o.THREAD_SUBSCRIBED:{c(t.thread.url+"/comment/"+t.commentId,"Forum Activity",t.type,{user:t.user.name,thread:t.thread.title});break}default:c("unknown","unknown",null)}}),e-=l.length,s<r&&await n(s+1,e)}await n(1,e)}const A={activity_like:"{user} liked your activity.",activity_mention:"{user} mentioned you in their activity.",activity_message:"{user} sent you a message.",activity_reply:"{user} replied to your activity.",activity_reply_like:"{user} liked your activity reply.",activity_reply_subscribed:"{user} replied to an activity you're subscribed to.",following:"{user} started following you.",airing:"Episode {episode} of {media} aired.",related_media_addition:"{media} was recently added to the site.",media_data_change:"{media} recieved site data changes.",media_deletion:"{deleted} was deleted from the site.",media_merge:"{merged} was merged into {media}.",thread_like:"{user} liked your forum thread, {thread}.",thread_subscribed:"{user} commented in your subscribed forum thread  {thread}.",thread_comment_like:"{user} liked your comment, in the forum thread {thread}.",thread_comment_reply:"{user} replied to your comment, in the forum thread {thread}.",thread_comment_mention:"{user} mentioned you, in the forum thread {thread}."};function v(e,a){return a&&Object.entries(a).forEach(([r,n])=>{e=e.replace(new RegExp(`{${r}}`,"g"),n+"")}),e}function c(e,a,r,n){r?i.notifications.create(e,{type:"basic",iconUrl:"icons/128.png",isClickable:!0,title:`New ${a}`,message:v(A[r.toLowerCase()],n)}):i.notifications.create(e,{type:"basic",iconUrl:"icons/128.png",isClickable:!0,title:"Unknown notification",message:"This is an unknown notification type! Please report this so it can be properly supported."})}const I="query($amount: Int, $page: Int) { Page(perPage: $amount, page: $page) { notifications(resetNotificationCount: false) { ... on ActivityLikeNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on ActivityMentionNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on ActivityMessageNotification { id activityId user { ...user } activity: message { url: siteUrl } activityId context createdAt type } ... on ActivityReplyLikeNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on ActivityReplyNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on ActivityLikeNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on ActivityReplySubscribedNotification { id activityId user { ...user } activity { ...activity } context createdAt type } ... on AiringNotification { id media { ...media } episode contexts createdAt type } ... on RelatedMediaAdditionNotification { id media { ...media } context createdAt type } ... on FollowingNotification { id user { ...user } context createdAt type } ... on ThreadCommentLikeNotification { id thread { ...thread } user { ...user } commentId context createdAt type } ... on ThreadCommentMentionNotification { id thread { ...thread } user { ...user } commentId context createdAt type } ... on ThreadCommentReplyNotification { id thread { ...thread } user { ...user } commentId context createdAt type } ... on ThreadCommentSubscribedNotification { id thread { ...thread } user { ...user } commentId context createdAt type } ... on ThreadLikeNotification { id thread { ...thread } user { ...user } context createdAt type } } } } fragment media on Media { title { userPreferred } url: siteUrl } fragment user on User { name url: siteUrl } fragment thread on Thread { title url: siteUrl } fragment activity on ActivityUnion { __typename ... on TextActivity { url: siteUrl } ... on ListActivity { url: siteUrl } ... on MessageActivity { url: siteUrl } }";i.runtime.onMessage.addListener(async(e,a)=>{if(e.type)switch(e.type){case"AUTH":return await f();case"RESET_ALARMS":return await u();case"UPDATE_NOTIFICATION_COUNT":return await h()}});async function m({query:e,token:a,variables:r}){const n={Accept:"application/json","Content-Type":"application/json"};return a&&(n.Authorization=`Bearer ${a}`),fetch("https://graphql.anilist.co",{method:"POST",headers:n,body:JSON.stringify({query:e,variables:r})}).then(s=>s.json())}
